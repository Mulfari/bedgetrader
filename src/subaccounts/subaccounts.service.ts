import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import { PrismaService } from '../prisma.service';
import axios from 'axios';
import { HttpsProxyAgent } from 'https-proxy-agent';
import * as crypto from 'crypto';
// Comentamos la importaci√≥n que causa problemas y usamos axios directamente
// import { HttpService } from '@nestjs/axios';
import { ConfigService } from '@nestjs/config';
import { SubAccount } from '@prisma/client';

@Injectable()
export class SubaccountsService {
  constructor(
    private prisma: PrismaService,
    // private readonly httpService: HttpService, // Comentamos este servicio
    private readonly configService: ConfigService,
  ) {}

  // ‚úÖ Obtener subcuentas del usuario autenticado
  async getSubAccounts(userId: string) {
    try {
      console.log(`üîç Buscando subcuentas para el usuario con ID: ${userId}`);
      const subAccounts = await this.prisma.subAccount.findMany({ 
        where: { userId },
        include: { user: true } // Incluir datos del usuario relacionado
      });
      console.log(`‚úÖ Se encontraron ${subAccounts.length} subcuentas`);
      return subAccounts;
    } catch (error) {
      console.error('‚ùå Error detallado al obtener subcuentas:', error);
      throw new HttpException(
        `Error al obtener subcuentas: ${error.message || 'Error desconocido'}`, 
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  // ‚úÖ Obtener las API keys de una subcuenta
  async getSubAccountKeys(subAccountId: string, userId: string) {
    try {
      const subAccount = await this.prisma.subAccount.findUnique({
        where: { id: subAccountId },
      });

      if (!subAccount || subAccount.userId !== userId) {
        throw new HttpException('Subcuenta no encontrada', HttpStatus.NOT_FOUND);
      }

      return { apiKey: subAccount.apiKey, apiSecret: subAccount.apiSecret };
    } catch (error) {
      throw new HttpException('Error obteniendo API keys', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  // M√©todo para buscar una subcuenta espec√≠fica
  async findOne(id: string, userId: string): Promise<SubAccount | null> {
    try {
      return await this.prisma.subAccount.findFirst({
        where: { 
          id,
          userId 
        }
      });
    } catch (error) {
      console.error(`‚ùå Error al buscar subcuenta ${id}:`, error.message);
      throw new HttpException('Error al buscar subcuenta', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  // M√©todo para generar datos simulados
  private generateSimulatedData() {
    const balance = Math.random() * 10000;
    const performance = (Math.random() * 20) - 10; // Entre -10% y +10%
    
    // Generar algunos activos simulados
    const assets: Array<{coin: string; walletBalance: number; usdValue: number}> = [
      { coin: 'BTC', walletBalance: Math.random() * 0.5, usdValue: Math.random() * 2000 },
      { coin: 'ETH', walletBalance: Math.random() * 5, usdValue: Math.random() * 1500 },
      { coin: 'USDT', walletBalance: Math.random() * 5000, usdValue: Math.random() * 5000 }
    ];
    
    return {
      balance,
      performance,
      assets,
      isSimulated: true,
      isDebug: false, // A√±adir propiedad isDebug con valor por defecto false
      isDemo: false   // A√±adir propiedad isDemo con valor por defecto false
    };
  }

  // M√©todo para obtener balance del exchange
  private async getExchangeBalance(subaccount: SubAccount): Promise<any> {
    console.log(`üîç Obteniendo balance para ${subaccount.exchange} (${subaccount.isDemo ? 'DEMO' : 'REAL'})`);
    
    // Verificar que tenemos las credenciales necesarias
    if (!subaccount.apiKey || !subaccount.apiSecret) {
      console.error('‚ùå Faltan credenciales de API para la subcuenta');
      throw new Error('Faltan credenciales de API pasra la subcuenta');
    }
    
    // Por ahora solo soportamos Bybit
    if (subaccount.exchange.toLowerCase() === 'bybit') {
      console.log(`üîç Usando m√©todo espec√≠fico para Bybit (${subaccount.isDemo ? 'DEMO' : 'REAL'})`);
      return this.getBybitBalance(subaccount);
    } else {
      console.error(`‚ùå Exchange ${subaccount.exchange} no soportado`);
      throw new Error(`Exchange ${subaccount.exchange} no soportado`);
    }
  }

  // M√©todo para obtener balance de Bybit
  private async getBybitBalance(subaccount: SubAccount): Promise<any> {
    try {
      // üîπ Configurar proxy
      const proxyAgent = new HttpsProxyAgent(
        "http://spj4f84ugp:cquYV74a4kWrct_V9h@de.smartproxy.com:20001"
      );

      // üîπ Par√°metros de autenticaci√≥n
      const timestamp = Date.now().toString();
      const apiKey = subaccount.apiKey;
      const apiSecret = subaccount.apiSecret;
      const recvWindow = "5000";

      // üîπ QueryString requerido por Bybit V5
      // Usar el mismo tipo de cuenta UNIFIED para todas las cuentas (reales y demo)
      const queryParams = { accountType: "UNIFIED" };
      const queryString = new URLSearchParams(queryParams).toString();

      // üîπ Crear el string para firmar
      const signPayload = `${timestamp}${apiKey}${recvWindow}${queryString || ""}`;
      const signature = crypto.createHmac('sha256', apiSecret).update(signPayload).digest('hex');

      console.log(`üîç String para firmar: ${signPayload}`);
      console.log(`üîç Firma generada: ${signature}`);

      // üîπ Headers actualizados para Bybit V5
      const headers = {
              'X-BAPI-API-KEY': apiKey,
              'X-BAPI-TIMESTAMP': timestamp,
              'X-BAPI-RECV-WINDOW': recvWindow,
              'X-BAPI-SIGN': signature,
      };

      // üîπ URL de Bybit para obtener el balance
      // Usar la URL correcta seg√∫n si es una cuenta demo o real
      const baseUrl = subaccount.isDemo 
        ? "https://api-demo.bybit.com"  // URL para cuentas demo (api-demo)
        : "https://api.bybit.com";      // URL para cuentas reales
      
      const url = `${baseUrl}/v5/account/wallet-balance`;
      
      console.log(`üì° Enviando solicitud a Bybit (${subaccount.isDemo ? 'DEMO' : 'REAL'}): ${url}`);

      // üîπ Hacer la solicitud a Bybit con tiempo de espera
      const axiosConfig = {
        headers,
        params: queryParams,
        httpsAgent: proxyAgent,
        timeout: 5000, // üîπ Timeout de 5 segundos para evitar esperas largas
      };

      const response = await axios.get(url, axiosConfig);

      console.log(`üì° Respuesta de Bybit:`, JSON.stringify(response.data, null, 2));

      if (!response.data || response.data.retCode !== 0) {
        console.error(`‚ùå Error en Bybit: ${response.data.retMsg} (C√≥digo: ${response.data.retCode})`);
        throw new Error(`Error en Bybit: ${response.data.retMsg}`);
      }

      // Procesar la respuesta para extraer el balance total y los activos
      const result = response.data.result;
      
      // Verificar si hay datos en el resultado
      if (!result || !result.list || result.list.length === 0) {
        console.error('‚ùå No se encontraron datos de balance en la respuesta de Bybit');
        throw new Error('No se encontraron datos de balance en la respuesta de Bybit');
      }
      
      // Obtener el primer elemento de la lista (cuenta UNIFIED)
      const accountData = result.list[0];
      
      // Verificar si hay datos de la cuenta
      if (!accountData || !accountData.coin || !Array.isArray(accountData.coin)) {
        console.error('‚ùå Estructura de datos inesperada en la respuesta de Bybit');
        throw new Error('Estructura de datos inesperada en la respuesta de Bybit');
      }
      
      // Calcular el balance total sumando los usdValue de todas las monedas
      let totalBalance = 0;
      const assets: Array<{coin: string; walletBalance: number; usdValue: number}> = [];
      
      // Procesar cada moneda
      accountData.coin.forEach(coin => {
        // Verificar si la moneda tiene un valor en USD
        const usdValue = parseFloat(coin.usdValue || '0');
        
        // Sumar al balance total
        totalBalance += usdValue;
        
        // Solo incluir monedas con balance positivo
        if (usdValue > 0 || parseFloat(coin.walletBalance || '0') > 0) {
          assets.push({
            coin: coin.coin,
            walletBalance: parseFloat(coin.walletBalance || '0'),
            usdValue: usdValue
          });
        }
      });
      
      console.log(`‚úÖ Balance total calculado: ${totalBalance}`);
      console.log(`‚úÖ Activos procesados: ${assets.length}`);
      
      return {
        balance: totalBalance,
        assets,
        performance: 0, // Bybit no proporciona rendimiento directamente
        isSimulated: false,
        isDemo: subaccount.isDemo // Indicar si es una cuenta demo
      };
    } catch (error) {
      console.error(`‚ùå Error al obtener balance de Bybit:`, error.message);
      throw error;
    }
  }

  // ‚úÖ Obtener el balance de una subcuenta en Bybit
  async getSubAccountBalance(id: string, userId: string): Promise<any> {
    try {
      console.log(`üîç Iniciando getSubAccountBalance para subcuenta ${id}, usuario ${userId}`);
      
      const subaccount = await this.findOne(id, userId);
      
      if (!subaccount) {
        console.error(`‚ùå Subcuenta ${id} no encontrada para usuario ${userId}`);
        throw new HttpException('Subcuenta no encontrada', HttpStatus.NOT_FOUND);
      }
      
      console.log(`‚úÖ Subcuenta encontrada: ${JSON.stringify({
        id: subaccount.id,
        exchange: subaccount.exchange,
        isDemo: subaccount.isDemo,
        apiKey: subaccount.apiKey ? `${subaccount.apiKey.substring(0, 5)}...` : 'no-key'
      })}`);
      
      // IMPORTANTE: Siempre intentamos obtener datos reales, tanto para cuentas demo como reales
      console.log(`üîç Obteniendo balance para cuenta ${id} en ${subaccount.exchange} (${subaccount.isDemo ? 'DEMO' : 'REAL'})`);
      
      try {
        // Intentar obtener el balance real
        const balance = await this.getExchangeBalance(subaccount);
        console.log(`‚úÖ Balance obtenido correctamente para subcuenta: ${id}`);
        
        // Si es una cuenta demo, marcamos los datos
        if (subaccount.isDemo) {
          balance.isDemo = true;
        }
        
        return balance;
      } catch (exchangeError) {
        console.error(`‚ùå Error al obtener balance de ${subaccount.exchange}:`, exchangeError.message);
        
        // Si el error es de restricci√≥n geogr√°fica, intentar con el proxy
        if (exchangeError.message?.includes('ubicaci√≥n geogr√°fica') || 
            exchangeError.message?.includes('CloudFront') || 
            exchangeError.response?.status === 403) {
          console.log('‚ö†Ô∏è Detectada restricci√≥n geogr√°fica, intentando con proxy alternativo...');
          
          try {
            console.log(`üîÑ Llamando a getExchangeBalanceViaProxy para ${id}...`);
            const balanceViaProxy = await this.getExchangeBalanceViaProxy(subaccount);
            console.log(`‚úÖ Balance obtenido v√≠a proxy para subcuenta: ${id}`);
            
            // Si es una cuenta demo, marcamos los datos
            if (subaccount.isDemo) {
              balanceViaProxy.isDemo = true;
            }
            
            return balanceViaProxy;
          } catch (proxyError) {
            console.error('‚ùå Error al intentar con proxy:', proxyError.message);
            
            // Si es una cuenta demo y fallaron todos los intentos, generar datos simulados como √∫ltimo recurso
            if (subaccount.isDemo) {
              console.log(`‚ö†Ô∏è Cuenta demo ${id}: Generando datos simulados como √∫ltimo recurso.`);
              const simulatedData = this.generateSimulatedData();
              simulatedData.isDemo = true;
              return simulatedData;
            }
            
            // Para cuentas reales, lanzar el error
            throw new HttpException(
              'No se pudo obtener el balance real de la cuenta, incluso usando m√©todos alternativos. Por favor verifica tus credenciales de API.',
              HttpStatus.BAD_REQUEST
            );
          }
        }
        
        // Si es una cuenta demo y fall√≥ el intento principal, generar datos simulados como √∫ltimo recurso
        if (subaccount.isDemo) {
          console.log(`‚ö†Ô∏è Cuenta demo ${id}: Generando datos simulados como √∫ltimo recurso.`);
          const simulatedData = this.generateSimulatedData();
          simulatedData.isDemo = true;
          return simulatedData;
        }
        
        // Para cuentas reales, lanzar el error
        console.error(`‚ùå Error obteniendo balance para subcuenta ${id}:`, exchangeError.message);
        throw new HttpException(
          `No se pudo obtener el balance real de la cuenta. Por favor verifica tus credenciales de API y que la cuenta tenga permisos de lectura.`,
          HttpStatus.BAD_REQUEST
        );
      }
    } catch (error) {
      console.error(`‚ùå Error en getSubAccountBalance:`, error.message);
        throw error;
    }
  }

  // ‚úÖ Crear una nueva subcuenta
  async createSubAccount(userId: string, exchange: string, apiKey: string, apiSecret: string, name: string, isDemo: boolean = false) {
    try {
      console.log(`üîπ Creando subcuenta para usuario: ${userId}`);
      console.log(`üîπ Datos: exchange=${exchange}, name=${name}, apiKey=${apiKey.substring(0, 5)}..., isDemo=${isDemo}`);
      
      // Verificar que el usuario existe antes de crear la subcuenta
      const user = await this.prisma.user.findUnique({
        where: { id: userId }
      });
      
      if (!user) {
        console.error(`‚ùå Usuario con ID ${userId} no encontrado`);
        throw new HttpException('Usuario no encontrado', HttpStatus.NOT_FOUND);
      }
      
      const newSubAccount = await this.prisma.subAccount.create({
        data: { 
          userId, 
          exchange, 
          apiKey, 
          apiSecret, 
          name,
          isDemo // Usar el valor proporcionado en lugar de hardcodearlo como true
        },
        include: { user: true } // Incluir datos del usuario relacionado
      });
      
      console.log(`‚úÖ Subcuenta creada con √©xito: ${newSubAccount.id}`);
      return newSubAccount;
    } catch (error) {
      console.error('‚ùå Error detallado al crear subcuenta:', error);
      
      // Manejar errores espec√≠ficos de Prisma
      if (error.code) {
        console.error(`‚ùå C√≥digo de error Prisma: ${error.code}`);
        
        if (error.code === 'P2003') {
          throw new HttpException('Error de clave for√°nea: el usuario no existe', HttpStatus.BAD_REQUEST);
        }
      }
      
      throw new HttpException(
        `Error al crear subcuenta: ${error.message || 'Error desconocido'}`, 
        HttpStatus.INTERNAL_SERVER_ERROR
      );
    }
  }

  // ‚úÖ Actualizar una subcuenta existente
  async updateSubAccount(id: string, userId: string, exchange: string, apiKey: string, apiSecret: string, name: string) {
    try {
      const subAccount = await this.prisma.subAccount.findUnique({ where: { id } });

      if (!subAccount || subAccount.userId !== userId) {
        throw new HttpException('Subcuenta no encontrada', HttpStatus.NOT_FOUND);
      }

      return await this.prisma.subAccount.update({
        where: { id },
        data: { exchange, apiKey, apiSecret, name },
      });
    } catch (error) {
      throw new HttpException('Error al actualizar subcuenta', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  // ‚úÖ Eliminar una subcuenta
  async deleteSubAccount(id: string, userId: string) {
    try {
      const subAccount = await this.prisma.subAccount.findUnique({ where: { id } });

      if (!subAccount || subAccount.userId !== userId) {
        throw new HttpException('Subcuenta no encontrada', HttpStatus.NOT_FOUND);
      }

      return await this.prisma.subAccount.delete({ where: { id } });
    } catch (error) {
      throw new HttpException('Error al eliminar subcuenta', HttpStatus.INTERNAL_SERVER_ERROR);
    }
  }

  // M√©todo para obtener balance a trav√©s de un proxy
  private async getExchangeBalanceViaProxy(subaccount: SubAccount): Promise<any> {
    // Implementaci√≥n temporal que devuelve datos simulados para depuraci√≥n
    console.log(`üîÑ M√©todo getExchangeBalanceViaProxy llamado para ${subaccount.exchange} (${subaccount.isDemo ? 'DEMO' : 'REAL'})...`);
    
    try {
      // üîπ Configurar proxy alternativo (usando un proxy diferente)
      const proxyAgent = new HttpsProxyAgent(
        "http://spj4f84ugp:cquYV74a4kWrct_V9h@us.smartproxy.com:20001" // Usar servidor en US
      );

      // üîπ Par√°metros de autenticaci√≥n
      const timestamp = Date.now().toString();
      const apiKey = subaccount.apiKey;
      const apiSecret = subaccount.apiSecret;
      const recvWindow = "5000";

      // üîπ QueryString requerido por Bybit V5
      const queryParams = { accountType: "UNIFIED" };
      const queryString = new URLSearchParams(queryParams).toString();

      // üîπ Crear el string para firmar
      const signPayload = `${timestamp}${apiKey}${recvWindow}${queryString || ""}`;
      const signature = crypto.createHmac('sha256', apiSecret).update(signPayload).digest('hex');

      console.log(`üîç String para firmar (proxy): ${signPayload}`);
      console.log(`üîç Firma generada (proxy): ${signature}`);

      // üîπ Headers actualizados para Bybit V5
      const headers = {
        'X-BAPI-API-KEY': apiKey,
        'X-BAPI-TIMESTAMP': timestamp,
        'X-BAPI-RECV-WINDOW': recvWindow,
        'X-BAPI-SIGN': signature,
      };

      // üîπ URL de Bybit para obtener el balance
      // Usar la URL correcta seg√∫n si es una cuenta demo o real
      const baseUrl = subaccount.isDemo 
        ? "https://api-demo.bybit.com"  // URL para cuentas demo (api-demo)
        : "https://api.bybit.com";      // URL para cuentas reales
      
      const url = `${baseUrl}/v5/account/wallet-balance`;
      
      console.log(`üì° Enviando solicitud a Bybit v√≠a proxy alternativo (${subaccount.isDemo ? 'DEMO' : 'REAL'}): ${url}`);

      // üîπ Hacer la solicitud a Bybit con tiempo de espera
      const axiosConfig = {
        headers,
        params: queryParams,
        httpsAgent: proxyAgent,
        timeout: 8000, // üîπ Timeout m√°s largo para el proxy alternativo
      };

      const response = await axios.get(url, axiosConfig);

      console.log(`üì° Respuesta de Bybit v√≠a proxy:`, JSON.stringify(response.data, null, 2));

      if (!response.data || response.data.retCode !== 0) {
        console.error(`‚ùå Error en Bybit v√≠a proxy: ${response.data.retMsg} (C√≥digo: ${response.data.retCode})`);
        throw new Error(`Error en Bybit v√≠a proxy: ${response.data.retMsg}`);
      }

      // Procesar la respuesta para extraer el balance total y los activos
      const result = response.data.result;
      
      // Verificar si hay datos en el resultado
      if (!result || !result.list || result.list.length === 0) {
        console.error('‚ùå No se encontraron datos de balance en la respuesta de Bybit v√≠a proxy');
        throw new Error('No se encontraron datos de balance en la respuesta de Bybit v√≠a proxy');
      }
      
      // Obtener el primer elemento de la lista (cuenta UNIFIED)
      const accountData = result.list[0];
      
      // Verificar si hay datos de la cuenta
      if (!accountData || !accountData.coin || !Array.isArray(accountData.coin)) {
        console.error('‚ùå Estructura de datos inesperada en la respuesta de Bybit v√≠a proxy');
        throw new Error('Estructura de datos inesperada en la respuesta de Bybit v√≠a proxy');
      }
      
      // Calcular el balance total sumando los usdValue de todas las monedas
      let totalBalance = 0;
      const assets: Array<{coin: string; walletBalance: number; usdValue: number}> = [];
      
      // Procesar cada moneda
      accountData.coin.forEach(coin => {
        // Verificar si la moneda tiene un valor en USD
        const usdValue = parseFloat(coin.usdValue || '0');
        
        // Sumar al balance total
        totalBalance += usdValue;
        
        // Solo incluir monedas con balance positivo
        if (usdValue > 0 || parseFloat(coin.walletBalance || '0') > 0) {
          assets.push({
            coin: coin.coin,
            walletBalance: parseFloat(coin.walletBalance || '0'),
            usdValue: usdValue
          });
        }
      });
      
      console.log(`‚úÖ Balance total calculado v√≠a proxy: ${totalBalance}`);
      console.log(`‚úÖ Activos procesados v√≠a proxy: ${assets.length}`);
      
      return {
        balance: totalBalance,
        assets,
        performance: 0, // Bybit no proporciona rendimiento directamente
        isSimulated: false,
        isDemo: subaccount.isDemo // Indicar si es una cuenta demo
      };
    } catch (error) {
      console.error(`‚ùå Error al obtener balance v√≠a proxy:`, error.message);
      
      // Si es una cuenta demo, generar datos simulados como fallback
      if (subaccount.isDemo) {
        console.log(`‚ö†Ô∏è Generando datos simulados como fallback para cuenta demo...`);
        const simulatedData = this.generateSimulatedData();
        simulatedData.isDemo = true;
        return simulatedData;
      }
      
      // Para cuentas reales, propagar el error
      throw error;
    }
  }
}
